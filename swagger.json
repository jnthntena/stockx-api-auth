{
  "openapi": "3.0.0",
  "info": {
    "title": "StockX Public API",
    "version": "2.0.0",
    "description": "Manage StockX seller account using APIs\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "license": {
      "name": "MIT"
    },
    "contact": {}
  },
  "servers": [
    {
      "url": "https://api.stockx.com/v2"
    }
  ],
  "tags": [
    {
      "name": "Batch",
      "description": "Batch APIs enable a user to create, update, delete listings in bulk. Batch APIs are asynchronous in nature and we provide mechanisms to poll the API so that you can keep track of the batch completion.  Once a batch is successfully completed, you can view the status of each individual listing.  We track each individual listing inside a batch separately so you can have scenarios where some listings succeed and some fail in a single batch."
    },
    {
      "name": "Listings",
      "description": "Listings APIs enable a seller to programmatically sell on StockX. The APIs enable a user to  create, update and delete listings on the marketplace, as well as view and fetch live market data for any live or expired listings you have"
    },
    {
      "name": "Catalog",
      "description": "StockX offers a curated catalog to both buyers and sellers, which is quite different from how other marketplaces deal with catalog and listings."
    },
    {
      "name": "Order",
      "description": "Order APIs enable a user to view all their active orders / sales as well as details for a single order."
    }
  ],
  "paths": {
    "/selling/batch/create-listing": {
      "post": {
        "operationId": "CreateListings",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchCreateListingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Create a new batch of listings",
        "summary": "Batch listings creation",
        "tags": [
          "Batch"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchCreateListingInput"
              }
            }
          }
        }
      }
    },
    "/selling/batch/create-listing/{batchId}": {
      "get": {
        "operationId": "GetListingCreateBatch",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetListingCreateBatchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Once you are able to create a batch successfully, you need to poll the get batch status API to track the progress of the batch.\nThis polling is necessary because all batch operations are asynchronous in nature.",
        "summary": "Batch listings creation - Get Batch Status",
        "tags": [
          "Batch"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique Batch ID",
            "in": "path",
            "name": "batchId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/selling/batch/create-listing/{batchId}/items": {
      "get": {
        "operationId": "GetListingCreateBatchItems",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetListingCreateBatchItemsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Once a batch completes successfully, you need to use the get batch items API to see the results of each item in the batch.\nYou can also use this API at any point in time after the batch is created to see the progress of each individual item in a batch.",
        "summary": "Batch listings creation - Get Items",
        "tags": [
          "Batch"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "The ID of batch",
            "in": "path",
            "name": "batchId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Status of listing",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "COMPLETED"
          }
        ]
      }
    },
    "/selling/batch/delete-listing": {
      "post": {
        "operationId": "DeleteListings",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchDeleteListingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Batch delete listings API allows a user to delete up to 100 individual listings in a single API call.\nThis API is asynchronous in nature and will return a batchId that you would need to poll using the polling APIs described later.",
        "summary": "Batch listings deletion",
        "tags": [
          "Batch"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchDeleteListingInput"
              }
            }
          }
        }
      }
    },
    "/selling/batch/delete-listing/{batchId}": {
      "get": {
        "operationId": "GetListingDeleteBatch",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetListingDeleteBatchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Once you are able to create a batch successfully, you need to poll the get batch status API to track the progress of the batch.\nThis polling is necessary because all batch operations are asynchronous in nature.",
        "summary": "Batch listings deletion - Get Batch Status",
        "tags": [
          "Batch"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique Batch ID",
            "in": "path",
            "name": "batchId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/selling/batch/delete-listing/{batchId}/items": {
      "get": {
        "operationId": "GetListingDeleteBatchItems",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetListingDeleteBatchItemsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Once a batch completes successfully, you need to use the get batch items API to see the results of each item in the batch.\nYou can also use this API at any point in time after the batch is created to see the progress of each individual item in a batch.",
        "summary": "Batch listings deletion - Get Items",
        "tags": [
          "Batch"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique Batch ID",
            "in": "path",
            "name": "batchId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "COMPLETED"
          }
        ]
      }
    },
    "/selling/batch/update-listing": {
      "post": {
        "operationId": "UpdateListings",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpdateListingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Batch update listings API allows a user to update up to 100 individual listings in a single API call.\nThis API is asynchronous in nature and will return a batchId that you would need to poll using the polling APIs described later.",
        "summary": "Batch listings update",
        "tags": [
          "Batch"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchUpdateListingInput"
              }
            }
          }
        }
      }
    },
    "/selling/batch/update-listing/{batchId}": {
      "get": {
        "operationId": "GetListingUpdateBatch",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetListingUpdateBatchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Once you are able to create a batch successfully, you need to poll the get batch status API to track the progress of the batch.\nThis polling is necessary because all batch operations are asynchronous in nature.",
        "summary": "Batch listings update - Get Batch Status",
        "tags": [
          "Batch"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique Batch ID",
            "in": "path",
            "name": "batchId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/selling/batch/update-listing/{batchId}/items": {
      "get": {
        "operationId": "GetListingUpdateBatchItems",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetListingUpdateBatchItemsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Once a batch completes successfully, you need to use the get batch items API to see the results of each item in the batch.\nYou can also use this API at any point in time after the batch is created to see the progress of each individual item in a batch",
        "summary": "Batch listings update - Get Items",
        "tags": [
          "Batch"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique Batch ID",
            "in": "path",
            "name": "batchId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Status of listing",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "COMPLETED"
          }
        ]
      }
    },
    "/catalog/products/{productId}": {
      "get": {
        "operationId": "GetProduct",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Get product details API allows you to fetch details for a single product",
        "summary": "Get single product",
        "tags": [
          "Catalog"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique identifier for a product",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/catalog/products/{productId}/variants/{variantId}": {
      "get": {
        "operationId": "GetVariant",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantDetails"
                }
              }
            }
          },
          "400": {
            "description": "Variant does not belong to the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Get variant details API allows you to fetch the details of a single variant for a given product.\nIf the product id doesn't contain the specified variant, a validation error will be returned.",
        "summary": "Get single product variant",
        "tags": [
          "Catalog"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique identifier for a product",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier for a products variant",
            "in": "path",
            "name": "variantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/catalog/products/{productId}/variants": {
      "get": {
        "operationId": "GetVariants",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProductVariant"
                  },
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Get product variants API allows you to get all the different variants of a given product.",
        "summary": "Get all product variants",
        "tags": [
          "Catalog"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique identifier for a product",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/catalog/products/{productId}/variants/{variantId}/market-data": {
      "get": {
        "operationId": "GetVariantMarketData",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariantMarketData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Get Market Data API allows you to obtain basic market data - the highest Bid and lowest Ask amount for a given variant.\nIf the product id doesn't contain the specified variant, a validation error will be returned.<br/>\n<b>Note:</b> We have deprecated the country param as the market data will now be based on your market.",
        "summary": "Get market data for a variant",
        "tags": [
          "Catalog"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique identifier for a product",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier for a products variant",
            "in": "path",
            "name": "variantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The currency code this product is being listed in.<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"",
            "in": "query",
            "name": "currencyCode",
            "required": false,
            "schema": {
              "default": "USD",
              "type": "string"
            }
          },
          {
            "description": "ISO Alpha-2 code representing the country you need the market data for. If not provided, will default to your country.",
            "in": "query",
            "name": "country",
            "required": false,
            "schema": {
              "type": "string"
            },
            "deprecated": true
          }
        ]
      }
    },
    "/catalog/search": {
      "get": {
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Search"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Search catalog API allows you to search the StockX catalog via freeform text.\nThe output is a paginated list of products that match the search term provided in the API call.",
        "summary": "Search catalog",
        "tags": [
          "Catalog"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Specifies a keyword search as a String.",
            "in": "query",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100
            },
            "example": "nike"
          },
          {
            "description": "Requested page number. By default, the page number starts at 1.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 1
            },
            "example": 1
          },
          {
            "description": "The number of products to return. By default, the page size starts at 1.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            },
            "example": 10
          }
        ]
      }
    },
    "/selling/listings": {
      "post": {
        "operationId": "Create",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingAsyncOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Create listings API allows you to create new listings.\nThe listings correspond to an ask in the StockX UI. The listings can be for the same variant ID.",
        "summary": "Create a new listing",
        "tags": [
          "Listings"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateListingInput"
              }
            }
          }
        }
      },
      "get": {
        "operationId": "GetAllListings",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Listings"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Get all listings API allows you to fetch all existing listings. Multiple filters are available.",
        "summary": "Get all listings",
        "tags": [
          "Listings"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Requested page number. By default the page number starts at 1",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 1
            },
            "example": 1
          },
          {
            "description": "The number of listings to return. By default the page size starts at 1.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "example": 100
          },
          {
            "description": "Comma separated list of ids. This field must not include array brackets `[]` or quotation marks (\" \" | ' ').",
            "in": "query",
            "name": "productIds",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma separated list of ids. This field must not include array brackets `[]` or quotation marks (\" \" | ' ').",
            "in": "query",
            "name": "variantIds",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma separated list of ids. This field must not include array brackets `[]` or quotation marks (\" \" | ' ').",
            "in": "query",
            "name": "batchIds",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start date of the query",
            "in": "query",
            "name": "fromDate",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "2022-06-08"
          },
          {
            "description": "End date of the query",
            "in": "query",
            "name": "toDate",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "2022-06-08"
          },
          {
            "description": "Comma separated list of listing statuses. This field must not include array brackets `[]` or quotation marks (\"\" | '').<br><br>Available values: \"INACTIVE\", \"ACTIVE\", \"DELETED\", \"CANCELED\", \"MATCHED\", \"COMPLETED\"",
            "in": "query",
            "name": "listingStatuses",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ACTIVE"
          },
          {
            "description": "Comma separated list of inventory types. This field must not include array brackets `[]` or quotation marks (\"\" | '').",
            "in": "query",
            "name": "inventoryTypes",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "STANDARD"
          }
        ]
      }
    },
    "/selling/listings/{listingId}/activate": {
      "put": {
        "operationId": "ActivateListing",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingAsyncOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Activate listing API allows you to activate a listing. A listing is active when it contains an available ask.",
        "summary": "Activate a listing",
        "tags": [
          "Listings"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique ID for this listing",
            "in": "path",
            "name": "listingId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateListingInput"
              }
            }
          }
        }
      }
    },
    "/selling/listings/{listingId}/deactivate": {
      "put": {
        "operationId": "DeactivateListing",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingAsyncOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Deactivate listing API allows you to deactivate a listing. A listing is deactivated when it doesn't have an ask or when it contains an expired ask.",
        "summary": "Deactivate a listing",
        "tags": [
          "Listings"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique ID for this listing",
            "in": "path",
            "name": "listingId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/selling/listings/{listingId}": {
      "patch": {
        "operationId": "Update",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingAsyncOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Operation used to update an existing listing by its ID.",
        "summary": "Update a listing",
        "tags": [
          "Listings"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique ID for this listing",
            "in": "path",
            "name": "listingId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateListingInput"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteListing",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingAsyncOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Operation used to delete an existing listing by its ID.",
        "summary": "Delete a listing",
        "tags": [
          "Listings"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique ID for this listing",
            "in": "path",
            "name": "listingId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "operationId": "FindById",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Get a listing API allows you to get a listing by its ID.",
        "summary": "Get single listing",
        "tags": [
          "Listings"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique ID for this listing",
            "in": "path",
            "name": "listingId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/selling/listings/{listingId}/operations/{operationId}": {
      "get": {
        "operationId": "FindOperationById",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationApi"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Get listing operation API allows you to fetch a listing operation by listing ID and operation ID",
        "summary": "Get single listing operation",
        "tags": [
          "Listings"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique ID for this listing.",
            "in": "path",
            "name": "listingId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique ID for this operation.",
            "in": "path",
            "name": "operationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/selling/listings/{listingId}/operations": {
      "get": {
        "operationId": "GetListingOperations",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationsCursorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Get all listing operations API allows you to fetch a paginated list of single listing with all operations.",
        "summary": "Get all listing operations",
        "tags": [
          "Listings"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique ID for this listing",
            "in": "path",
            "name": "listingId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Requested page number. Starts at 1.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "description": "The cursor to use as a starting point",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/selling/listings/{listingId}/market-data": {
      "get": {
        "operationId": "GetMarketData",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Get Basic Market Data API allows you to obtain basic market data - the highest Bid and lowest Ask amount for a given listing.<br/>\n<b>Note:</b> This API will be deprecated on March 25, 2024. Check out our enhanced market data API in the catalog section.",
        "summary": "Get market data",
        "tags": [
          "Listings"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "Unique listing ID needed to fetch market data. Note: You must have a listing for that product to retrieve the marketdata.",
            "in": "path",
            "name": "listingId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ISO Alpha-2 code representing the country you need the market data for.",
            "in": "query",
            "name": "country",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The currency code this product is being listed in.<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"",
            "in": "query",
            "name": "currencyCode",
            "required": false,
            "schema": {
              "default": "USD",
              "type": "string"
            }
          }
        ]
      }
    },
    "/selling/orders/active": {
      "get": {
        "operationId": "GetOrders",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Orders"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Get all active orders API allows you to view all their active orders in the StockX marketplace.\nAn order is considered active from the time it was created to the time the product was received and authenticated by StockX and the seller is paid out.",
        "summary": "Get active orders",
        "tags": [
          "Order"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "The number of page",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "description": "Requested page number. Starts at 1",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "description": "To filter your Orders by a given order status<br><br>Available values: \"CREATED\", \"CCAUTHORIZATIONFAILED\", \"SHIPPED\", \"RECEIVED\", \"AUTHENTICATING\", \"AUTHENTICATED\", \"PAYOUTPENDING\", \"PAYOUTCOMPLETED\", \"SYSTEMFULFILLED\", \"PAYOUTFAILED\", \"SUSPENDED\"",
            "in": "query",
            "name": "orderStatus",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "CREATED"
          },
          {
            "description": "Unique identifier for a product",
            "in": "query",
            "name": "productId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier for a products variant",
            "in": "query",
            "name": "variantId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The field by which the results are sorted. Defaults to \"CREATEDAT\" and can also accept \"SHIPBYDATE\".",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/selling/orders/history": {
      "get": {
        "operationId": "GetHistoricalOrders",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Orders"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Get all historical orders. Multiple filters are available.",
        "summary": "Get historical orders",
        "tags": [
          "Order"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "The start date of when the orders were created. Format is YYYY-MM-DD.",
            "in": "query",
            "name": "fromDate",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The end date of when the orders were created. Format is YYYY-MM-DD.",
            "in": "query",
            "name": "toDate",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The requested page number. By default the page number is 1",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 1
            },
            "example": 1
          },
          {
            "description": "The number of orders to be returned. By default the number is 10",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "example": 100
          },
          {
            "description": "To filter your Orders by a given order status<br><br>Available values: \"AUTHFAILED\", \"DIDNOTSHIP\", \"CANCELED\", \"COMPLETED\", \"RETURNED\"",
            "in": "query",
            "name": "orderStatus",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "CANCELED"
          },
          {
            "description": "Unique StockX product ID",
            "in": "query",
            "name": "productId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique StockX variant ID",
            "in": "query",
            "name": "variantId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/selling/orders/{orderNumber}": {
      "get": {
        "operationId": "GetOrder",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedOrder"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Get order details API allows you to fetch details for a single order by order number.\nThis includes shipping and payout information.",
        "summary": "Get single order",
        "tags": [
          "Order"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "description": "The unique order number",
            "in": "path",
            "name": "orderNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/selling/orders/{orderNumber}/shipping-document/{shippingId}": {
      "get": {
        "operationId": "GetOrderShipment",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/pdf": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiError"
                }
              }
            }
          }
        },
        "description": "Get an existing shipping document.",
        "summary": "Get shipping document",
        "tags": [
          "Order"
        ],
        "security": [
          {
            "api_key": [],
            "jwt": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "jwt-authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of order to fetch",
            "in": "path",
            "name": "orderNumber",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "323314425-323214184"
          },
          {
            "description": "The shipping ID of order to fetch",
            "in": "path",
            "name": "shippingId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "323314425-323214184"
          }
        ]
      }
    }
  },
  "components": {
    "examples": {},
    "headers": {},
    "parameters": {},
    "requestBodies": {},
    "responses": {},
    "schemas": {
      "HttpStatusCodeLiteral": {
        "type": "number",
        "enum": [
          100,
          101,
          102,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          226,
          300,
          301,
          302,
          303,
          304,
          305,
          307,
          308,
          400,
          401,
          402,
          403,
          404,
          405,
          406,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          415,
          416,
          417,
          418,
          422,
          423,
          424,
          426,
          428,
          429,
          431,
          500,
          501,
          502,
          503,
          504,
          505,
          506,
          507,
          508,
          510,
          511
        ]
      },
      "PublicApiError": {
        "properties": {
          "statusCode": {
            "$ref": "#/components/schemas/HttpStatusCodeLiteral",
            "description": "The error status code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "The error message",
            "example": "The request did not succeed 😭"
          }
        },
        "required": [
          "statusCode",
          "message"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "BatchStatusCounts": {
        "properties": {},
        "additionalProperties": {
          "type": "number",
          "format": "double"
        },
        "type": "object",
        "example": {
          "queued": "20",
          "failed": "1"
        },
        "description": "The number of items in this batch grouped by their statuses.\nThis is a short-hand way to quickly introspect how many items are still enqued, how many succeeded or how many failed in a batch."
      },
      "BatchCreateListingResponse": {
        "properties": {
          "batchId": {
            "type": "string",
            "description": "Unique Batch ID",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "status": {
            "type": "string",
            "description": "The status of the batch",
            "example": "QUEUED"
          },
          "completedAt": {
            "type": "string",
            "nullable": true,
            "description": "When the batch fully completed",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "createdAt": {
            "type": "string",
            "description": "when this batch was created in UTC. Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "When this batch was last updated in UTC. Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "totalItems": {
            "type": "number",
            "format": "double",
            "description": "Total number of items in this batch",
            "example": 10
          },
          "itemStatuses": {
            "$ref": "#/components/schemas/BatchStatusCounts",
            "description": "The number of items in this batch grouped by their statuses.\nThis is a short-hand way to quickly introspect how many items are still enqued, how many succeeded or how many failed in a batch."
          }
        },
        "required": [
          "batchId",
          "status",
          "completedAt",
          "createdAt",
          "updatedAt",
          "totalItems",
          "itemStatuses"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CreateBatchListingRequestItem": {
        "properties": {
          "quantity": {
            "type": "number",
            "format": "double",
            "description": "The total number of Listings that need to be created.",
            "example": 10
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency this Listing is being listed in. If not provided, it will default to USD.<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"",
            "example": "USD"
          },
          "variantId": {
            "type": "string",
            "description": "Unique StockX variant ID that this Listing is being created for",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "expiresAt": {
            "type": "string",
            "description": "UTC timestamp representing when this Listing should auto-expire.  If not provided, it will default to 365 days from today. Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "amount": {
            "type": "string",
            "description": "The amount this Listing is being listed for",
            "example": "79"
          }
        },
        "required": [
          "quantity",
          "variantId",
          "amount"
        ],
        "type": "object"
      },
      "BatchCreateListingInput": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CreateBatchListingRequestItem"
            },
            "type": "array",
            "description": "An array of items that should be associated with the batch"
          }
        },
        "required": [
          "items"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "UUID": {
        "type": "string",
        "example": "bf364c53-eb77-4522-955c-6a6ce952cc6f",
        "description": "Stringified UUIDv4.\nSee [RFC 4112](https://tools.ietf.org/html/rfc4122)",
        "pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
      },
      "GetListingCreateBatchResponse": {
        "properties": {
          "batchId": {
            "$ref": "#/components/schemas/UUID",
            "description": "Unique Batch ID",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "status": {
            "type": "string",
            "description": "The status of this batch",
            "example": "QUEUED"
          },
          "completedAt": {
            "type": "string",
            "nullable": true,
            "description": "When this batch fully completed. Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "createdAt": {
            "type": "string",
            "description": "When this batch was created. Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "When this batch was last updated. Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "totalItems": {
            "type": "number",
            "format": "double",
            "description": "Total number of items in this batch",
            "example": 10
          },
          "itemStatuses": {
            "$ref": "#/components/schemas/BatchStatusCounts",
            "description": "The number of items in this batch grouped by their statuses.\nThis is a short-hand way to quickly introspect how many items are still enqued, how many succeeded or how many failed in a batch",
            "example": "IN_PROGRESS"
          }
        },
        "required": [
          "batchId",
          "status",
          "completedAt",
          "createdAt",
          "updatedAt",
          "totalItems",
          "itemStatuses"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetListingCreateBatchItem": {
        "properties": {
          "itemId": {
            "type": "string",
            "nullable": true,
            "description": "Unique Item ID",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "status": {
            "type": "string",
            "nullable": true,
            "description": "The status of this item",
            "example": "QUEUED"
          },
          "listingInput": {
            "properties": {
              "currencyCode": {
                "type": "string",
                "nullable": true,
                "description": "The currency code for this listing<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"",
                "example": "USD"
              },
              "variantId": {
                "type": "string",
                "nullable": true,
                "description": "The ID of the variant",
                "example": "98e2e748-8000-45bf-a624-5531d6a68318"
              },
              "expiresAt": {
                "type": "string",
                "nullable": true,
                "description": "When this listing expires in UTC",
                "example": "2021-11-09T12:44:31.000Z"
              },
              "amount": {
                "type": "string",
                "nullable": true,
                "description": "The amount this listing is listed for",
                "example": "300"
              }
            },
            "required": [
              "currencyCode",
              "variantId",
              "expiresAt",
              "amount"
            ],
            "type": "object",
            "description": "The input for this item that was used when creating the batch"
          },
          "result": {
            "properties": {
              "askId": {
                "type": "string",
                "nullable": true,
                "description": "The unique askId of this listing.",
                "example": "98e2e748-8000-45bf-a624-5531d6a68318"
              },
              "listingId": {
                "type": "string",
                "nullable": true,
                "description": "The unique listingId of this listing. This is a new ID being introduced that is analogous to askId",
                "example": "98e2e748-8000-45bf-a624-5531d6a68318"
              }
            },
            "required": [
              "askId",
              "listingId"
            ],
            "type": "object",
            "description": "If an item was successfully processed, the result object will contain the following:"
          },
          "error": {
            "type": "string",
            "description": "If an item failed to process, the error attribute will contain the error message describing the reason the item failed to process"
          }
        },
        "required": [
          "itemId",
          "status",
          "listingInput"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetListingCreateBatchItemsResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/GetListingCreateBatchItem"
            },
            "type": "array",
            "description": "An array of items associated with the listing"
          }
        },
        "required": [
          "items"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "BatchDeleteListingResponse": {
        "properties": {
          "batchId": {
            "type": "string",
            "description": "Unique Batch ID",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "status": {
            "type": "string",
            "description": "The status of the batch",
            "example": "QUEUED"
          },
          "completedAt": {
            "type": "string",
            "nullable": true,
            "description": "When this batch was completed in UTC.  Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "createdAt": {
            "type": "string",
            "description": "When this batch was created in UTC.  Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "When this batch was updated in UTC.  Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "totalItems": {
            "type": "number",
            "format": "double",
            "description": "Total number of items in this batch",
            "example": 10
          },
          "itemStatuses": {
            "$ref": "#/components/schemas/BatchStatusCounts",
            "description": "The number of items in this batch grouped by their statuses. This is a short-hand way to quickly introspect how many items are still enqued, how many succeeded or how many failed in a batch"
          }
        },
        "required": [
          "batchId",
          "status",
          "completedAt",
          "createdAt",
          "updatedAt",
          "totalItems",
          "itemStatuses"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "DeleteBatchListingRequestItem": {
        "properties": {
          "listingId": {
            "type": "string",
            "description": "Unique listing ID that needs to be deleted",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          }
        },
        "required": [
          "listingId"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "BatchDeleteListingInput": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DeleteBatchListingRequestItem"
            },
            "type": "array",
            "description": "An array of IDs that should be associated with the batch"
          }
        },
        "required": [
          "items"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetListingDeleteBatchResponse": {
        "properties": {
          "batchId": {
            "type": "string",
            "description": "Unique Batch ID",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "status": {
            "type": "string",
            "description": "The status of the batch",
            "example": "QUEUED"
          },
          "completedAt": {
            "type": "string",
            "nullable": true,
            "description": "When this batch was completed in UTC.  Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "createdAt": {
            "type": "string",
            "description": "When this batch was created in UTC.  Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "When this batch was updated in UTC.  Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "totalItems": {
            "type": "number",
            "format": "double",
            "description": "Total number of items in this batch",
            "example": 10
          },
          "itemStatuses": {
            "$ref": "#/components/schemas/BatchStatusCounts",
            "description": "The number of items in this batch grouped by their statuses. This is a short-hand way to quickly introspect how many items are still enqued, how many succeeded or how many failed in a batch"
          }
        },
        "required": [
          "batchId",
          "status",
          "completedAt",
          "createdAt",
          "updatedAt",
          "totalItems",
          "itemStatuses"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetListingDeleteBatchItem": {
        "properties": {
          "itemId": {
            "type": "string",
            "description": "Unique Item ID",
            "example": "09f3f859-9000-56cg-a624-6642d6a68318"
          },
          "status": {
            "type": "string",
            "description": "The status of the task",
            "example": "IN_PROGRESS"
          },
          "listingInput": {
            "properties": {
              "id": {
                "type": "string",
                "description": "The id of target listing"
              }
            },
            "required": [
              "id"
            ],
            "type": "object",
            "description": "The input for this item that was used when creating the batch"
          },
          "error": {
            "type": "string",
            "description": "If an item failed to process, the error attribute will contain the error message describing the reason the item failed to process"
          },
          "result": {
            "properties": {
              "askId": {
                "type": "string",
                "nullable": true,
                "description": "The unique askId of this listing.",
                "example": "09f3f859-9000-56cg-a624-6642d6a68318"
              },
              "listingId": {
                "type": "string",
                "nullable": true,
                "description": "The unique listingId of this listing. This is a new ID being introduced that is analogous to askId",
                "example": "09f3f859-9000-56cg-a624-6642d6a68318"
              }
            },
            "required": [
              "askId",
              "listingId"
            ],
            "type": "object",
            "description": "If an item was successfully processed, the result object will contain the following:"
          }
        },
        "required": [
          "itemId",
          "status",
          "listingInput"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetListingDeleteBatchItemsResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/GetListingDeleteBatchItem"
            },
            "type": "array",
            "description": "An array of items associated with the listing"
          }
        },
        "required": [
          "items"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "BatchUpdateListingResponse": {
        "properties": {
          "batchId": {
            "type": "string",
            "description": "Unique Batch ID",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "status": {
            "type": "string",
            "description": "The status of the batch",
            "example": "QUEUED"
          },
          "completedAt": {
            "type": "string",
            "nullable": true,
            "description": "When this batch was last completed in UTC.  Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "createdAt": {
            "type": "string",
            "description": "When this batch was last created in UTC.  Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "When this batch was last updated in UTC.  Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "totalItems": {
            "type": "number",
            "format": "double",
            "description": "Total number of items in this batch",
            "example": 10
          },
          "itemStatuses": {
            "$ref": "#/components/schemas/BatchStatusCounts",
            "description": "The number of items in this batch grouped by their statuses.\nThis is a short-hand way to quickly introspect how many items are still enqued, how many succeeded or how many failed in a batch"
          }
        },
        "required": [
          "batchId",
          "status",
          "completedAt",
          "createdAt",
          "updatedAt",
          "totalItems",
          "itemStatuses"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "UpdateBatchListingRequestItem": {
        "properties": {
          "listingId": {
            "type": "string",
            "description": "Unique listing ID that needs to be updated",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "amount": {
            "type": "string",
            "description": "The amount this Listing is updated to",
            "example": 79
          },
          "expiresAt": {
            "type": "string",
            "description": "UTC timestamp representing the Listing expiry date that is being updated to",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency this Listing is updated to<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"",
            "example": "USD"
          }
        },
        "required": [
          "listingId"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "BatchUpdateListingInput": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/UpdateBatchListingRequestItem"
            },
            "type": "array",
            "description": "An array of items that should be associated with the batch"
          }
        },
        "required": [
          "items"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetListingUpdateBatchResponse": {
        "properties": {
          "batchId": {
            "type": "string",
            "description": "Unique Batch ID",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "status": {
            "type": "string",
            "description": "The status of the batch",
            "example": "QUEUED"
          },
          "completedAt": {
            "type": "string",
            "nullable": true,
            "description": "When this batch was completed in UTC. Represented as ISO 8601 format like 2022-01-18T20:20:39Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "createdAt": {
            "type": "string",
            "description": "When this batch was created in UTC. Represented as ISO 8601 format like 2022-01-18T20:20:39Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "When this batch was updated in UTC. Represented as ISO 8601 format like 2022-01-18T20:20:39Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "totalItems": {
            "type": "number",
            "format": "double",
            "description": "Total number of items in this batch",
            "example": 10
          },
          "itemStatuses": {
            "$ref": "#/components/schemas/BatchStatusCounts",
            "description": "The number of items in this batch grouped by their statuses. This is a short-hand way to quickly introspect how many items are still enqued, how many succeeded or how many failed in a batch"
          }
        },
        "required": [
          "batchId",
          "status",
          "completedAt",
          "createdAt",
          "updatedAt",
          "totalItems",
          "itemStatuses"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetListingUpdateBatchItem": {
        "properties": {
          "itemId": {
            "type": "string",
            "description": "Unique Item ID",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "status": {
            "type": "string",
            "description": "The status of this item",
            "example": "QUEUED"
          },
          "listingInput": {
            "properties": {
              "currencyCode": {
                "type": "string",
                "description": "The currency code for this listing<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"",
                "example": "USD"
              },
              "expiresAt": {
                "type": "string",
                "description": "When this listing expires in UTC",
                "example": "2021-11-09T12:44:31.000Z"
              },
              "amount": {
                "type": "string",
                "description": "The amount this listing is listed for",
                "example": "98e2e748-8000-45bf-a624-5531d6a68318"
              },
              "listingId": {
                "type": "string",
                "description": "The ID of the listing",
                "example": "98e2e748-8000-45bf-a624-5531d6a68318"
              }
            },
            "required": [
              "listingId"
            ],
            "type": "object",
            "description": "The input for this item that was used when creating the batch"
          },
          "result": {
            "properties": {
              "askId": {
                "type": "string",
                "nullable": true,
                "description": "The unique askId of this listing.",
                "example": "98e2e748-8000-45bf-a624-5531d6a68318"
              },
              "listingId": {
                "type": "string",
                "nullable": true,
                "description": "The unique listingId of this listing. This is a new ID being introduced that is analogous to askId",
                "example": "98e2e748-8000-45bf-a624-5531d6a68318"
              }
            },
            "required": [
              "askId",
              "listingId"
            ],
            "type": "object",
            "description": "If an item was successfully processed, the result object will contain the following"
          },
          "error": {
            "type": "string",
            "description": "If an item failed to process, the error attribute will contain the error message describing the reason the item failed to process"
          }
        },
        "required": [
          "itemId",
          "status",
          "listingInput"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetListingUpdateBatchItemsResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/GetListingUpdateBatchItem"
            },
            "type": "array",
            "description": "An array of items associated with the listing"
          }
        },
        "required": [
          "items"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Product": {
        "description": "Product information",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Unique identifier for a product",
            "example": "bf364c53-eb77-4522-955c-6a6ce952cc6f"
          },
          "urlKey": {
            "type": "string",
            "description": "The product name",
            "example": "purple-hand-bag-leather"
          },
          "styleId": {
            "type": "string",
            "nullable": true,
            "description": "ID of prduct style",
            "example": "BY9109"
          },
          "productType": {
            "type": "string",
            "description": "The type of product categories that are available on StockX",
            "example": "handbags"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "description": "A string that uniquely identifies the product name.",
            "example": "Gucci Duchessa Boston Bag"
          },
          "brand": {
            "type": "string",
            "nullable": true,
            "description": "Brand of the product",
            "example": "Nike"
          },
          "productAttributes": {
            "properties": {
              "gender": {
                "type": "string",
                "nullable": true,
                "description": "Gender targeted product",
                "example": "women"
              },
              "season": {
                "type": "string",
                "nullable": true,
                "description": "The season the product was released",
                "example": "SS21"
              },
              "releaseDate": {
                "type": "string",
                "nullable": true,
                "description": "The date the product was released",
                "example": "2017-09-14"
              },
              "retailPrice": {
                "type": "number",
                "format": "double",
                "nullable": true,
                "description": "The retail price of the product.",
                "example": 456
              },
              "colorway": {
                "type": "string",
                "nullable": true,
                "description": "The combinations of colors in which the product is designed",
                "example": "String/Black-Villain Red-Neptune Green"
              },
              "color": {
                "type": "string",
                "nullable": true,
                "description": "Color of product",
                "example": "purple"
              }
            },
            "required": [
              "gender",
              "season",
              "releaseDate",
              "retailPrice",
              "colorway",
              "color"
            ],
            "type": "object",
            "description": "Object containing the attributes of the product."
          }
        },
        "required": [
          "productId",
          "urlKey",
          "styleId",
          "productType",
          "title",
          "brand",
          "productAttributes"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ProductVariantDetails": {
        "properties": {
          "productId": {
            "type": "string",
            "description": "Unique identifier for a product",
            "example": "bf364c53-eb77-4522-955c-6a6ce952cc6f"
          },
          "variantId": {
            "type": "string",
            "description": "Unique identifier for a products variant",
            "example": "586c3334-4dac-4ee0-bce3-eea845581a08"
          },
          "variantName": {
            "type": "string",
            "description": "SKU of the variant",
            "example": "Auston-Matthews-2016-Upper-Deck-Series-1-Young-Guns-Rookie-201:0"
          },
          "variantValue": {
            "type": "string",
            "description": "Variant's value",
            "example": "PSA 10"
          }
        },
        "required": [
          "productId",
          "variantId",
          "variantName",
          "variantValue"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ProductVariant": {
        "description": "Variant information",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Unique identifier for a product",
            "example": "bf364c53-eb77-4522-955c-6a6ce952cc6f"
          },
          "variantId": {
            "type": "string",
            "description": "Unique identifier for a products variant",
            "example": "586c3334-4dac-4ee0-bce3-eea845581a08"
          },
          "variantName": {
            "type": "string",
            "description": "SKU of the variant",
            "example": "Auston-Matthews-2016-Upper-Deck-Series-1-Young-Guns-Rookie-201:0"
          },
          "variantValue": {
            "type": "string",
            "nullable": true,
            "description": "Variant's value",
            "example": "PSA 10"
          }
        },
        "required": [
          "productId",
          "variantId",
          "variantName",
          "variantValue"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "VariantMarketData": {
        "properties": {
          "productId": {
            "type": "string",
            "description": "Unique identifier for this product",
            "example": "35d76ac8-a112-4d75-b44f-c8ef04a87c93"
          },
          "variantId": {
            "type": "string",
            "description": "Unique identifier for this product variant",
            "example": "35d76ac8-a112-4d75-b44f-c8ef04a87c93"
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code. If not provided, it will default to USD.  Only valid currencies supported on stockx.com are supported via API.<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"",
            "example": "USD"
          },
          "lowestAskAmount": {
            "type": "string",
            "nullable": true,
            "description": "The lowest ask for the product variant listed in the country requested.",
            "example": "100"
          },
          "highestBidAmount": {
            "type": "string",
            "nullable": true,
            "description": "The highest bid for the product variant listed in the country requested.",
            "example": "150"
          },
          "sellFasterAmount": {
            "type": "string",
            "nullable": true,
            "description": "The price you have to list at, inclusive of duties and taxes, to become the lowest Ask to buyers in the United States.",
            "example": "150"
          },
          "earnMoreAmount": {
            "type": "string",
            "nullable": true,
            "description": "The price you have to list at, to become the lowest ask to buyers in your region. This accounts for VAT and taxes.",
            "example": "151"
          }
        },
        "required": [
          "productId",
          "variantId",
          "currencyCode",
          "highestBidAmount"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Search": {
        "properties": {
          "count": {
            "type": "number",
            "format": "double",
            "description": "Total number of items present",
            "example": 266
          },
          "pageSize": {
            "type": "number",
            "format": "double",
            "description": "Total number of items in the current page",
            "example": 10
          },
          "pageNumber": {
            "type": "number",
            "format": "double",
            "description": "Requested page number. Starts at 1.",
            "example": 1
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Returns true if there are elements in the next page.",
            "example": true
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/Product"
            },
            "type": "array",
            "description": "List of products that matched the search term"
          }
        },
        "required": [
          "count",
          "pageSize",
          "pageNumber",
          "hasNextPage",
          "products"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "OperationType": {
        "type": "string",
        "enum": [
          "CREATE",
          "UPDATE",
          "DELETE",
          "ACTIVATE",
          "DEACTIVATE"
        ]
      },
      "OperationStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "SUCCEEDED",
          "FAILED"
        ]
      },
      "OperationInitiatedBy": {
        "type": "string",
        "enum": [
          "USER",
          "SYSTEM"
        ]
      },
      "SupportedOperationInitiatedVia": {
        "enum": [
          "IOS",
          "ANDROID",
          "WEB",
          "STOCKX-PRO",
          "SCOUT",
          "SHOPIFY",
          "PUBLIC-API",
          "INTERNAL-SYSTEM"
        ],
        "type": "string"
      },
      "Additions_RecursivePartial_ListingChangeableFields__": {
        "properties": {},
        "type": "object",
        "example": {
          "active": true,
          "askData": {
            "amount": "100",
            "currency": "USD",
            "expiresAt": "2022-08-24T18:06:43.600Z"
          }
        },
        "description": "The additions of current listing"
      },
      "Updates_RecursivePartial_ListingChangeableFields__": {
        "properties": {},
        "type": "object",
        "example": {
          "updatedAt": "2021-11-09T12:44:31.000Z"
        },
        "description": "The updates of current listing"
      },
      "Removals_RecursivePartial_ListingChangeableFields__": {
        "properties": {},
        "type": "object",
        "description": "The removals of current listing"
      },
      "Diff_RecursivePartial_ListingChangeableFields__": {
        "description": "JSON metadata object which include the changes of current listing",
        "properties": {
          "additions": {
            "$ref": "#/components/schemas/Additions_RecursivePartial_ListingChangeableFields__"
          },
          "updates": {
            "$ref": "#/components/schemas/Updates_RecursivePartial_ListingChangeableFields__"
          },
          "removals": {
            "$ref": "#/components/schemas/Removals_RecursivePartial_ListingChangeableFields__"
          }
        },
        "required": [
          "additions",
          "updates",
          "removals"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ListingOperationsChangesDiff": {
        "$ref": "#/components/schemas/Diff_RecursivePartial_ListingChangeableFields__",
        "description": "JSON metadata object which include the changes of current listing"
      },
      "ListingAsyncOperationResponse": {
        "properties": {
          "listingId": {
            "type": "string",
            "description": "Unique ID for this listing",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "operationId": {
            "type": "string",
            "description": "Unique ID for this operation",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "operationType": {
            "$ref": "#/components/schemas/OperationType",
            "description": "The types of operation conducted on the listing",
            "example": "CREATE"
          },
          "operationStatus": {
            "$ref": "#/components/schemas/OperationStatus",
            "description": "The current operation status of this listing",
            "example": "PENDING"
          },
          "operationUrl": {
            "type": "string",
            "nullable": true,
            "description": "The URL used for to poll the status of the operation.",
            "example": "https://api.stockx.com/v2/selling/listings/c0a635ce-322f-49e1-9bfc-f954fc46f6bd/operations/d0a635ce-322f-49e1-9bfc-f954fc46f6be"
          },
          "operationInitiatedBy": {
            "$ref": "#/components/schemas/OperationInitiatedBy",
            "description": "This field specifies how the operation was initiated",
            "example": "SYSTEM"
          },
          "operationInitiatedVia": {
            "$ref": "#/components/schemas/SupportedOperationInitiatedVia",
            "description": "By whom was the operation initiated",
            "example": "PUBLIC-API"
          },
          "createdAt": {
            "type": "string",
            "description": "When the listing was created in UTC. Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "When this listing was last updated in UTC. Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "changes": {
            "$ref": "#/components/schemas/ListingOperationsChangesDiff",
            "description": "JSON metadata object which include the changes of current listing"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "description": "Error message if the creation failed",
            "example": null
          }
        },
        "required": [
          "listingId",
          "operationId",
          "operationType",
          "operationStatus",
          "operationUrl",
          "operationInitiatedBy",
          "operationInitiatedVia",
          "createdAt",
          "updatedAt",
          "changes"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CreateListingInput": {
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount this product is being listed for",
            "example": "150"
          },
          "variantId": {
            "type": "string",
            "description": "Unique StockX variant ID that this listing is being created for",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code this product is being listed in. If not provided, it will default to USD.  Only valid currencies supported on stockx.com are supported via API<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"",
            "example": "USD"
          },
          "expiresAt": {
            "type": "string",
            "description": "UTC timestamp representing when this Ask should auto-expire.  If not provided, it will default to 365 days from today.  Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "active": {
            "type": "boolean",
            "description": "A flag that defaults to true, activating the listing on the StockX marketplace",
            "example": true,
            "default": "true"
          }
        },
        "required": [
          "amount",
          "variantId"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ActivateListingInput": {
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount this product is being listed for",
            "example": "150"
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code this product is being listed in. If not provided, it will default to USD.  Only valid currencies supported on stockx.com are supported via API<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"",
            "example": "USD"
          },
          "expiresAt": {
            "type": "string",
            "description": "UTC timestamp representing when this Ask should auto-expire.  If not provided, it will default to 365 days from today.  Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "UpdateListingInput": {
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount that will appear on stockx.com\nThe amount this product is being listed for",
            "example": "150"
          },
          "currencyCode": {
            "type": "string",
            "description": "Currency in which the ask is placed<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"\nThe currency code this product is being listed in. If not provided, it will default to USD.  Only valid currencies supported on stockx.com are supported via API.<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"",
            "example": "USD"
          },
          "expiresAt": {
            "type": "string",
            "description": "When the ask expires\nUTC timestamp representing when this listing should auto-expire.  If not provided, it will default to 365 days from today. Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "OperationApi": {
        "properties": {
          "listingId": {
            "type": "string",
            "description": "Unique ID for this listing",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "operationId": {
            "type": "string",
            "description": "Unique ID for this operation.",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "operationType": {
            "$ref": "#/components/schemas/OperationType",
            "description": "The types of operation conducted on the listing",
            "example": "CREATE"
          },
          "operationStatus": {
            "$ref": "#/components/schemas/OperationStatus",
            "description": "The current operation status of this listing",
            "example": "PENDING"
          },
          "operationInitiatedBy": {
            "$ref": "#/components/schemas/OperationInitiatedBy",
            "description": "This field specifices how the operation was initiated",
            "example": "SYSTEM"
          },
          "operationInitiatedVia": {
            "$ref": "#/components/schemas/SupportedOperationInitiatedVia",
            "description": "What initiated the operation",
            "example": "INTERNAL-SYSTEM"
          },
          "createdAt": {
            "type": "string",
            "description": "When the listing was created in UTC. Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "When this listing was last updated in UTC.  Represented as ISO 8601 format like 2022-01-18T20:20:39Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "changes": {
            "$ref": "#/components/schemas/ListingOperationsChangesDiff",
            "description": "JSON metadata object which include the changes of current listing"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "description": "Error message if the creation failed",
            "example": null
          }
        },
        "required": [
          "listingId",
          "operationId",
          "operationType",
          "operationStatus",
          "operationInitiatedBy",
          "operationInitiatedVia",
          "createdAt",
          "updatedAt",
          "changes",
          "error"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "OperationsCursorResponse": {
        "properties": {
          "nextCursor": {
            "type": "string",
            "nullable": true,
            "description": "Used for pagination when more than 200 operations are retrieved. The nextCursor value received in response will be same for all subsequent page requests.",
            "example": "c29tZS1jdXJzb3ItZGF0YQ=="
          },
          "operations": {
            "items": {
              "$ref": "#/components/schemas/OperationApi"
            },
            "type": "array",
            "description": "A list of the operations requested"
          }
        },
        "required": [
          "nextCursor",
          "operations"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ListingsResponseBatch": {
        "properties": {
          "batchId": {
            "type": "string",
            "description": "ID of the associated batch",
            "example": "86378f62-ad0e-4a06-9c8e-642731bb9140"
          },
          "taskId": {
            "type": "string",
            "description": "Id of the associated task",
            "example": "7083634e-3bc5-4747-a4f3-768093074b5e"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "ListingResponseAsk": {
        "properties": {
          "askId": {
            "type": "string",
            "description": "Id of the created ask"
          },
          "askCreatedAt": {
            "type": "string",
            "description": "When the ask was created",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "askUpdatedAt": {
            "type": "string",
            "description": "When the ask was updated",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "askExpiresAt": {
            "type": "string",
            "description": "When the ask will expire",
            "example": "2021-11-09T12:44:31.000Z"
          }
        },
        "required": [
          "askId",
          "askCreatedAt",
          "askUpdatedAt"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ListingResponseOrder": {
        "properties": {
          "orderNumber": {
            "type": "string",
            "nullable": true,
            "description": "The order number",
            "example": "323314425-323214184"
          },
          "orderCreatedAt": {
            "type": "string",
            "nullable": true,
            "description": "When the order was created",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "orderStatus": {
            "type": "string",
            "nullable": true,
            "description": "The status of the given order",
            "example": "CREATED"
          }
        },
        "required": [
          "orderNumber",
          "orderCreatedAt",
          "orderStatus"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ListingResponseProduct": {
        "properties": {
          "productId": {
            "type": "string",
            "description": "Unique ID for this product",
            "example": "bf364c53-eb77-4522-955c-6a6ce952cc6f"
          },
          "productName": {
            "type": "string",
            "nullable": true,
            "description": "The name of the product",
            "example": "Nike Air"
          }
        },
        "required": [
          "productId",
          "productName"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ListingResponseVariant": {
        "properties": {
          "variantId": {
            "type": "string",
            "description": "Unique identifier that specifics a particular product.",
            "example": "bf364c53-eb77-4522-955c-6a6ce952cc6f"
          },
          "variantName": {
            "type": "string",
            "description": "Unique readable name of the products variant",
            "example": "color"
          },
          "variantValue": {
            "type": "string",
            "nullable": true,
            "description": "The value of the variant variant. For example, in the sneakers case, this could be 10 or in the trading cards case, this could be PSA 10, etc",
            "example": "black"
          }
        },
        "required": [
          "variantId",
          "variantName",
          "variantValue"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Adjustment": {
        "properties": {
          "adjustmentType": {
            "type": "string",
            "description": "The type of adjustment made",
            "example": "Shipping Fee (10%)"
          },
          "amount": {
            "type": "string",
            "description": "The amount of the adjustment",
            "example": 2.13
          },
          "percentage": {
            "type": "string",
            "description": "The percentage of the adjustment",
            "example": 0.1
          }
        },
        "required": [
          "adjustmentType",
          "amount",
          "percentage"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Payout": {
        "description": "The payout object that contains the payout details and any adjustments",
        "properties": {
          "totalPayout": {
            "type": "string",
            "description": "The total amount to be paid for the sale of the product",
            "example": 76.81
          },
          "salePrice": {
            "type": "string",
            "description": "The amount the product was sold for",
            "example": 79
          },
          "totalAdjustments": {
            "type": "string",
            "description": "The sum of all adjustments made",
            "example": -7
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code this product is being listed in. If not provided, it will default to USD.  Only valid currencies supported on stockx.com are supported via API.<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\""
          },
          "adjustments": {
            "items": {
              "$ref": "#/components/schemas/Adjustment"
            },
            "type": "array",
            "description": "The payout adjustment details if applicable"
          }
        },
        "required": [
          "totalPayout",
          "salePrice",
          "totalAdjustments",
          "currencyCode",
          "adjustments"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ListingResponseOperation": {
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Unique ID for this operation",
            "example": "bf364c53-eb77-4522-955c-6a6ce952cc6f"
          },
          "operationType": {
            "$ref": "#/components/schemas/OperationType",
            "description": "The types of operation conducted on the listing",
            "example": "ACTIVATE"
          },
          "operationStatus": {
            "$ref": "#/components/schemas/OperationStatus",
            "description": "The current operation status of this listing",
            "example": "PENDING"
          },
          "operationInitiatedBy": {
            "$ref": "#/components/schemas/OperationInitiatedBy",
            "description": "This field specifies how the operation was initiated.",
            "example": "USER"
          },
          "operationInitiatedVia": {
            "$ref": "#/components/schemas/SupportedOperationInitiatedVia",
            "description": "By whom was the operation initiated",
            "example": "PUBLIC-API"
          },
          "operationCreatedAt": {
            "type": "string",
            "description": "When the operation was created in UTC. Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "operationUpdatedAt": {
            "type": "string",
            "description": "Time of the last update in UTC. Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "changes": {
            "$ref": "#/components/schemas/ListingOperationsChangesDiff",
            "description": "Listing changes associated with this operation"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "description": "Operation error",
            "example": ""
          }
        },
        "required": [
          "operationId",
          "operationType",
          "operationStatus",
          "operationInitiatedBy",
          "operationInitiatedVia",
          "operationCreatedAt",
          "operationUpdatedAt",
          "changes"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ListingResponse": {
        "properties": {
          "listingId": {
            "type": "string",
            "description": "Unique ID for this listing",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "status": {
            "type": "string",
            "description": "The current status of the listing<br><br>Available values: \"INACTIVE\", \"ACTIVE\", \"DELETED\", \"CANCELED\", \"MATCHED\", \"COMPLETED\"",
            "example": "ACTIVE"
          },
          "amount": {
            "type": "string",
            "nullable": true,
            "description": "The amount this product is being listed for",
            "example": "300"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true,
            "description": "The currency code. If not provided, it will default to USD.  Only valid currencies supported on stockx.com are supported via API.<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"",
            "example": "AUD"
          },
          "inventoryType": {
            "type": "string",
            "nullable": true,
            "description": "A representation of who is holding the item",
            "example": "STANDARD"
          },
          "createdAt": {
            "type": "string",
            "description": "When the listing was created in UTC. Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "When this listing was last updated in UTC.  Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "batch": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListingsResponseBatch"
              }
            ],
            "nullable": true,
            "description": "Information about the batch this listing is part of, if this listing was touched with the batch APIs"
          },
          "ask": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListingResponseAsk"
              }
            ],
            "nullable": true,
            "description": "An object with ask details"
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListingResponseOrder"
              }
            ],
            "nullable": true,
            "description": "An object containing the order details"
          },
          "product": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListingResponseProduct"
              }
            ],
            "nullable": true,
            "description": "An object containing the product details."
          },
          "variant": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListingResponseVariant"
              }
            ],
            "nullable": true,
            "description": "Details about the particular product variant"
          },
          "payout": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payout"
              }
            ],
            "nullable": true,
            "description": "The payout object that contains the payout details and any adjustments like selling fees, shipping fees, taxes, etc."
          },
          "lastOperation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListingResponseOperation"
              }
            ],
            "nullable": true,
            "description": "An object containing the the details of the operation."
          }
        },
        "required": [
          "listingId",
          "status",
          "amount",
          "currencyCode",
          "inventoryType",
          "createdAt",
          "updatedAt",
          "batch",
          "ask",
          "order",
          "product",
          "variant",
          "payout",
          "lastOperation"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ListListings": {
        "properties": {
          "listingId": {
            "type": "string",
            "description": "Unique ID for this listing",
            "example": "98e2e748-8000-45bf-a624-5531d6a68318"
          },
          "status": {
            "type": "string",
            "description": "The current status of the listing<br><br>Available values: \"INACTIVE\", \"ACTIVE\", \"DELETED\", \"CANCELED\", \"MATCHED\", \"COMPLETED\"",
            "example": "ACTIVE"
          },
          "amount": {
            "type": "string",
            "nullable": true,
            "description": "The amount this product is being listed for",
            "example": "300"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true,
            "description": "The currency code. If not provided, it will default to USD.  Only valid currencies supported on stockx.com are supported via API.<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"",
            "example": "AUD"
          },
          "inventoryType": {
            "type": "string",
            "nullable": true,
            "description": "A representation of who is holding the item",
            "example": "STANDARD"
          },
          "createdAt": {
            "type": "string",
            "description": "When the listing was created in UTC. Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "When this listing was last updated in UTC.  Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z",
            "example": "2021-11-09T12:44:31.000Z"
          },
          "batch": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListingsResponseBatch"
              }
            ],
            "nullable": true,
            "description": "Information about the batch this listing is part of, if this listing was touched with the batch APIs"
          },
          "ask": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListingResponseAsk"
              }
            ],
            "nullable": true,
            "description": "An object with ask details"
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListingResponseOrder"
              }
            ],
            "nullable": true,
            "description": "An object containing the order details"
          },
          "product": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListingResponseProduct"
              }
            ],
            "nullable": true,
            "description": "An object containing the product details."
          },
          "variant": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListingResponseVariant"
              }
            ],
            "nullable": true,
            "description": "Details about the particular product variant"
          }
        },
        "required": [
          "listingId",
          "status",
          "amount",
          "currencyCode",
          "inventoryType",
          "createdAt",
          "updatedAt",
          "batch",
          "ask",
          "order",
          "product",
          "variant"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Listings": {
        "properties": {
          "count": {
            "type": "number",
            "format": "double",
            "description": "Total number of items present",
            "example": 266
          },
          "pageSize": {
            "type": "number",
            "format": "double",
            "description": "Total number of items in the current page",
            "example": 10
          },
          "pageNumber": {
            "type": "number",
            "format": "double",
            "description": "Requested page number. Starts at 1.",
            "example": 1
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Returns true if there are elements in the next page.",
            "example": true
          },
          "listings": {
            "items": {
              "$ref": "#/components/schemas/ListListings"
            },
            "type": "array",
            "description": "List of listings"
          }
        },
        "required": [
          "count",
          "pageSize",
          "pageNumber",
          "hasNextPage",
          "listings"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "MarketData": {
        "properties": {
          "listingId": {
            "type": "string",
            "description": "Unique identifier for this listing",
            "example": "35d76ac8-a112-4d75-b44f-c8ef04a87c93"
          },
          "productId": {
            "type": "string",
            "description": "Unique identifier for this product",
            "example": "35d76ac8-a112-4d75-b44f-c8ef04a87c93"
          },
          "variantId": {
            "type": "string",
            "description": "Unique identifier for this product variant",
            "example": "35d76ac8-a112-4d75-b44f-c8ef04a87c93"
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code. If not provided, it will default to USD.  Only valid currencies supported on stockx.com are supported via API.<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"",
            "example": "USD"
          },
          "lowestAskAmount": {
            "type": "string",
            "nullable": true,
            "description": "The lowest ask for the product variant listed in the country requested.",
            "example": 100
          },
          "highestBidAmount": {
            "type": "string",
            "nullable": true,
            "description": "The highest bid for the product variant listed in the country requested.",
            "example": 150
          }
        },
        "required": [
          "listingId",
          "productId",
          "variantId",
          "currencyCode",
          "lowestAskAmount",
          "highestBidAmount"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ActiveOrderStatus": {
        "enum": [
          "CREATED",
          "CCAUTHORIZATIONFAILED",
          "SHIPPED",
          "RECEIVED",
          "AUTHENTICATING",
          "AUTHENTICATED",
          "PAYOUTPENDING",
          "PAYOUTCOMPLETED",
          "SYSTEMFULFILLED",
          "PAYOUTFAILED",
          "SUSPENDED"
        ],
        "type": "string"
      },
      "HistoricalOrderStatus": {
        "enum": [
          "AUTHFAILED",
          "DIDNOTSHIP",
          "CANCELED",
          "COMPLETED",
          "RETURNED"
        ],
        "type": "string"
      },
      "UnknownStatus": {
        "enum": [
          "UNKNOWN"
        ],
        "type": "string"
      },
      "OrderStatus": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ActiveOrderStatus"
          },
          {
            "$ref": "#/components/schemas/HistoricalOrderStatus"
          },
          {
            "$ref": "#/components/schemas/UnknownStatus"
          }
        ],
        "description": "Status for the current order"
      },
      "OrderProduct": {
        "description": "Product information",
        "properties": {
          "productId": {
            "type": "string",
            "description": "StockX product ID",
            "example": "bf364c53-eb77-4522-955c-6a6ce952cc6f"
          },
          "productName": {
            "type": "string",
            "nullable": true,
            "description": "Name of the product",
            "example": "Gucci Duchessa Boston Bag"
          }
        },
        "required": [
          "productId",
          "productName"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Variant": {
        "description": "Variant information",
        "properties": {
          "variantId": {
            "type": "string",
            "description": "Unique identifier for a products variant"
          },
          "variantName": {
            "type": "string",
            "description": "Unique readable name of the products variant",
            "example": "Auston-Matthews-2016-Upper-Deck-Series-1-Young-Guns-Rookie-201:0"
          },
          "variantValue": {
            "type": "string",
            "nullable": true,
            "description": "The value of the variant. For example, in the sneakers case, this could be 10 or in the trading cards case, this could be PSA 10, etc.",
            "example": "PSA 10"
          }
        },
        "required": [
          "variantId",
          "variantName",
          "variantValue"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ListOrders": {
        "properties": {
          "orderNumber": {
            "type": "string",
            "description": "The unique order number",
            "example": "323314425-323214184"
          },
          "listingId": {
            "type": "string",
            "nullable": true,
            "description": "Unique ID for this listing",
            "example": "35d76ac8-a112-4d75-b44f-c8ef04a87c93"
          },
          "askId": {
            "type": "string",
            "description": "Unique identifier for an ask on the StockX platform",
            "example": "13658831621304650018"
          },
          "amount": {
            "type": "string",
            "description": "The ask/order price",
            "example": "140"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true,
            "description": "The currency type for this order.<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"",
            "example": "USD"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus",
            "description": "The current status of the order."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the order was created in UTC. Represented as ISO 8601 format like 2021-08-25T13:51:47.000Z",
            "example": "2021-08-25T13:51:47.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the order was updated in UTC. Represented as ISO 8601 format like 2021-08-25T13:51:47.000Z",
            "example": "2021-08-25T13:51:47.000Z"
          },
          "product": {
            "$ref": "#/components/schemas/OrderProduct",
            "description": "Product information"
          },
          "variant": {
            "$ref": "#/components/schemas/Variant",
            "description": "Details about the product variant"
          }
        },
        "required": [
          "orderNumber",
          "listingId",
          "askId",
          "amount",
          "currencyCode",
          "status",
          "createdAt",
          "updatedAt",
          "product",
          "variant"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Orders": {
        "properties": {
          "count": {
            "type": "number",
            "format": "double",
            "description": "Total number of items present",
            "example": 266
          },
          "pageSize": {
            "type": "number",
            "format": "double",
            "description": "Total number of items in the current page",
            "example": 10
          },
          "pageNumber": {
            "type": "number",
            "format": "double",
            "description": "Requested page number. Starts at 1.",
            "example": 1
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Returns true if there are elements in the next page.",
            "example": true
          },
          "orders": {
            "items": {
              "$ref": "#/components/schemas/ListOrders"
            },
            "type": "array",
            "description": "List containing the orders"
          }
        },
        "required": [
          "count",
          "pageSize",
          "pageNumber",
          "hasNextPage",
          "orders"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Shipment": {
        "properties": {
          "shipByDate": {
            "type": "string",
            "nullable": true,
            "description": "Date that the order should be shipped by."
          },
          "trackingNumber": {
            "type": "string",
            "nullable": true,
            "description": "The shipments tracking number",
            "example": "1Z3983AF9121770825"
          },
          "trackingUrl": {
            "type": "string",
            "nullable": true,
            "description": "The URL to the carriers web page.",
            "example": "http://wwwapps.ups.com/etracking/tracking.cgi?tracknum=1Z3983AF9121770825"
          },
          "carrierCode": {
            "type": "string",
            "nullable": true,
            "description": "The carrier code for the shipment provider.",
            "example": "UPS"
          },
          "shippingLabelUrl": {
            "type": "string",
            "nullable": true,
            "description": "The URL of the shipping label",
            "example": "https://stockx.com/shipping_label.png"
          },
          "shippingDocumentUrl": {
            "type": "string",
            "nullable": true,
            "description": "The URL of the StockX shipping document.",
            "example": "https://api.stockx.io/v1/selling/orders/12342334/shipping-document/S-123"
          }
        },
        "required": [
          "shipByDate",
          "trackingNumber",
          "trackingUrl",
          "carrierCode",
          "shippingLabelUrl",
          "shippingDocumentUrl"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "DetailedOrder": {
        "properties": {
          "askId": {
            "type": "string",
            "description": "Unique identifier for an ask on the StockX platform",
            "example": "13658831621304650018"
          },
          "orderNumber": {
            "type": "string",
            "description": "The unique order number",
            "example": "323314425-323214184"
          },
          "listingId": {
            "type": "string",
            "nullable": true,
            "description": "Unique ID for this listing",
            "example": "35d76ac8-a112-4d75-b44f-c8ef04a87c93"
          },
          "amount": {
            "type": "string",
            "description": "The ask/order price",
            "example": "140"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true,
            "description": "The currency type for this order.<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"",
            "example": "USD"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the order was created in UTC. Represented as ISO 8601 format like 2021-08-25T13:51:47.000Z",
            "example": "2021-08-25T13:51:47.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the order was updated in UTC. Represented as ISO 8601 format like 2021-08-25T13:51:47.000Z",
            "example": "2021-08-25T13:51:47.000Z"
          },
          "variant": {
            "$ref": "#/components/schemas/Variant",
            "description": "Details about the product variant"
          },
          "product": {
            "$ref": "#/components/schemas/OrderProduct",
            "description": "Product information"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus",
            "description": "The current status of the order."
          },
          "shipment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Shipment"
              }
            ],
            "nullable": true,
            "description": "The shipment details of the order."
          },
          "payout": {
            "$ref": "#/components/schemas/Payout",
            "description": "The payout object that contains the payout details and any adjustments like selling fees, shipping fees, taxes, etc."
          }
        },
        "required": [
          "askId",
          "orderNumber",
          "listingId",
          "amount",
          "currencyCode",
          "createdAt",
          "updatedAt",
          "variant",
          "product",
          "status",
          "shipment",
          "payout"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "StatusResponse": {
        "properties": {
          "status": {
            "type": "string",
            "description": "Is the server healthy or not",
            "example": "👍"
          }
        },
        "required": [
          "status"
        ],
        "type": "object",
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      },
      "jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}